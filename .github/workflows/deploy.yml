name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push App
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app:latest,${{ secrets.DOCKERHUB_USERNAME }}/app:${{ github.sha }}
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:cache
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/app:cache,mode=max

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env file
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          APP_PORT: ${{ secrets.APP_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          ACCESS_TOKEN_EXPIRATION_TIME: ${{ secrets.ACCESS_TOKEN_EXPIRATION_TIME }}
          REFRESH_TOKEN_EXPIRATION_TIME: ${{ secrets.REFRESH_TOKEN_EXPIRATION_TIME }}
          EMAIL_VERIFICATION_EXPIRATION_TIME: ${{ secrets.EMAIL_VERIFICATION_EXPIRATION_TIME }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_AUTH_USER: ${{ secrets.EMAIL_AUTH_USER }}
          EMAIL_AUTH_PASSWORD: ${{ secrets.EMAIL_AUTH_PASSWORD }}
          EMAIL_SENDER_NAME: ${{ secrets.EMAIL_SENDER_NAME }}
          EMAIL_SENDER_ADDRESS: ${{ secrets.EMAIL_SENDER_ADDRESS }}
        run: |
          echo DOCKER_REGISTRY=$DOCKER_REGISTRY >> .env
          echo APP_PORT=$APP_PORT >> .env
          echo DB_HOST=$DB_HOST >> .env
          echo DB_PORT=$DB_PORT >> .env
          echo DB_USER=$DB_USER >> .env
          echo DB_PASSWORD=$DB_PASSWORD >> .env
          echo DB_NAME=$DB_NAME >> .env
          echo ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET >> .env
          echo ACCESS_TOKEN_EXPIRATION_TIME=$ACCESS_TOKEN_EXPIRATION_TIME >> .env
          echo REFRESH_TOKEN_EXPIRATION_TIME=$REFRESH_TOKEN_EXPIRATION_TIME >> .env
          echo EMAIL_VERIFICATION_EXPIRATION_TIME=$EMAIL_VERIFICATION_EXPIRATION_TIME >> .env
          echo REDIS_HOST=$REDIS_HOST >> .env
          echo REDIS_PORT=$REDIS_PORT >> .env
          echo REDIS_PASSWORD=$REDIS_PASSWORD >> .env
          echo EMAIL_SERVICE=$EMAIL_SERVICE >> .env
          echo EMAIL_HOST=$EMAIL_HOST >> .env
          echo EMAIL_PORT=$EMAIL_PORT >> .env
          echo EMAIL_AUTH_USER=$EMAIL_AUTH_USER >> .env
          echo EMAIL_AUTH_PASSWORD=$EMAIL_AUTH_PASSWORD >> .env
          echo EMAIL_SENDER_NAME=$EMAIL_SENDER_NAME >> .env
          echo EMAIL_SENDER_ADDRESS=$EMAIL_SENDER_ADDRESS >> .env

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
        run: |
          mkdir -p ~/.ssh
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | ssh-add -
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

      - name: Create Docker Context
        env:
          USERNAME: ${{ secrets.USERNAME }}
          HOST: ${{ secrets.HOST }}
        run: |
          docker context create aftermeal --docker "host=ssh://$USERNAME@$HOST"
          docker context use aftermeal

      - name: Deploy application
        run: |
          docker compose pull app

          if docker ps -q -f name=app | grep -q .; then
            docker stop app
            docker rm app
          fi

          docker compose up -d --no-deps app

      - name: Clean up
        run: |
          docker image prune -f
